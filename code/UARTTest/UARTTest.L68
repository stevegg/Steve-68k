00000404 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2022-11-09 5:38:19 PM

00000000  =00000000                  1  ROMBASE     equ     $000000            ; Base address for ROM space
00000000  =00E00000                  2  RAMBASE     equ     $E00000             ; Base address for RAM
00000000  =00E0FFFF                  3  RAMLIMIT    equ     $E0FFFF             ; Limit of onboard RAM
00000000  =00F00000                  4  DUART       equ     $F00000             ; DUART memory location
00000000                             5  
00000000                             6  *********************************
00000000                             7  * 68681 Duart Register Addresses
00000000                             8  *
00000000                             9  
00000000  =00F00000                 10  MRA         EQU DUART+0         * Mode Register Port A
00000000  =00F00002                 11  SRA         EQU DUART+2         * Status Register Port A (read only).
00000000  =00F00002                 12  CSRA        EQU DUART+2         * Clock Select Register Port A (write only)
00000000  =00F00004                 13  CRA         EQU DUART+4         * Commands Register Port A (write only)
00000000  =00F00006                 14  RBA         EQU DUART+6         * Receiver Buffer Port A (read only)
00000000  =00F00006                 15  TBA         EQU DUART+6         * Transmitter Buffer Port A (write only)
00000000  =00F00008                 16  ACR         EQU DUART+8         * Auxiliary Control Register
00000000  =00F0000A                 17  ISR         EQU DUART+10        * Interrupt Status Register (read only)
00000000  =00F0000A                 18  IMR         EQU DUART+10        * Interrupt Mask Register (write only)
00000000  =00F00010                 19  MRB         EQU DUART+16        * Mode Register Port B
00000000  =00F00012                 20  SRB         EQU DUART+18        * Status Register Port B (read only).
00000000  =00F00012                 21  CSRB        EQU DUART+18        * Clock Select Register Port B (write only)
00000000  =00F00014                 22  CRB         EQU DUART+20        * Commands Register Port B (write only)
00000000  =00F00016                 23  RBB         EQU DUART+22        * Receiver Buffer Port B (read only)
00000000  =00F00016                 24  TBB         EQU DUART+22        * Transmitter Buffer Port B (write only)
00000000  =00F00018                 25  IVR         EQU DUART+24        * Interrupt Vector Register
00000000                            26  
00000000                            27  **********************************
00000000                            28  * ASCII Control Characters
00000000                            29  *
00000000  =00000007                 30  BEL         equ $07
00000000  =00000008                 31  BKSP        equ $08             * CTRL-H
00000000  =00000009                 32  TAB         equ $09
00000000  =0000000A                 33  LF          equ $0A
00000000  =0000000D                 34  CR          equ $0D
00000000  =0000001B                 35  ESC         equ $1B
00000000                            36  
00000000  =00000003                 37  CTRLC       EQU $03     
00000000  =00000018                 38  CTRLX       EQU $18             * Line Clear
00000000                            39  
00000000                            40      ORG $000
00000000                            41  
00000000                            42  VECTORS:
00000000= 00E0FFFF                  43      DC.L    RAMLIMIT                    ; 00: Stack (top of on-board RAM)
00000004= 00000404                  44      DC.L    START                       ; 01: Initial PC (start of ROM code)
00000008= 00000492                  45      DC.L    GENERIC_HANDLER             ; 02: Bus Error
0000000C                            46  
0000000C= 00000492                  47      DC.L    GENERIC_HANDLER             ; 02: Bus Error
00000010= 00000492                  48      DC.L    GENERIC_HANDLER             ; 03: Address Error
00000014= 00000492                  49      DC.L    GENERIC_HANDLER             ; 04: Illegal Instruction
00000018= 00000492                  50      DC.L    GENERIC_HANDLER             ; 05: Divide by Zero
0000001C= 00000492                  51      DC.L    GENERIC_HANDLER             ; 06: CHK Instruction
00000020= 00000492                  52      DC.L    GENERIC_HANDLER             ; 07: TRAPV Instruction
00000024= 00000492                  53      DC.L    GENERIC_HANDLER             ; 08: Privilege Violation
00000028= 00000492                  54      DC.L    GENERIC_HANDLER             ; 09: Trace
0000002C= 00000492                  55      DC.L    GENERIC_HANDLER             ; 0A: Line 1010 Emulator
00000030= 00000492                  56      DC.L    GENERIC_HANDLER             ; 0B: Line 1111 Emulator
00000034= 00000492                  57      DC.L    GENERIC_HANDLER             ; 0C: Reserved
00000038= 00000492                  58      DC.L    GENERIC_HANDLER             ; 0D: Reserved
0000003C= 00000492                  59      DC.L    GENERIC_HANDLER             ; 0E: Format error (MC68010 Only)
00000040= 00000492                  60      DC.L    GENERIC_HANDLER             ; 0F: Uninitialized Vector
00000044                            61  
00000044= 00000492 00000492 ...     62      DCB.L   8,GENERIC_HANDLER           ; 10-17: Reserved
00000064                            63  
00000064= 00000492                  64      DC.L    GENERIC_HANDLER             ; 18: Spurious Interrupt
00000068                            65  
00000068= 00000492 00000492 ...     66      DCB.L   7,GENERIC_HANDLER           ; 19-1F: Level 1-7 Autovectors
00000084= 00000492 00000492 ...     67      DCB.L   13,GENERIC_HANDLER          ; 20-2C: TRAP Handlers (unused)
000000B8= 00000492                  68      DC.L    GENERIC_HANDLER             ; 2D: TRAP#13 handler (replaced later)
000000BC= 00000492                  69      DC.L    GENERIC_HANDLER             ; 2E: TRAP#14 handler
000000C0= 00000492                  70      DC.L    GENERIC_HANDLER             ; 2F: TRAP#15 handler (replaced later)
000000C4= 00000492 00000492 ...     71      DCB.L   16,GENERIC_HANDLER          ; 30-3F: Remaining Reserved vectors
00000104= 00000492 00000492 ...     72      DCB.L   4,GENERIC_HANDLER           ; 40-43: MFP GPIO #0-3 (Not used)
00000114= 00000492                  73      DC.L    GENERIC_HANDLER             ; 44: MFP Timer D (Interrupt not used)
00000118= 00000492                  74      DC.L    GENERIC_HANDLER             ; 45: MFP Timer C (System tick)
0000011C= 00000492 00000492         75      DCB.L   2,GENERIC_HANDLER           ; 46-47: MFP GPIO #4-5 (Not used)
00000124= 00000492                  76      DC.L    GENERIC_HANDLER             ; 48: MFP Timer B (Not used)
00000128= 00000492                  77      DC.L    GENERIC_HANDLER             ; 49: Transmitter error (Not used)
0000012C= 00000492                  78      DC.L    GENERIC_HANDLER             ; 4A: Transmitter empty (Replaced later)
00000130= 00000492                  79      DC.L    GENERIC_HANDLER             ; 4B: Receiver error (Replaced later)
00000134= 00000492                  80      DC.L    GENERIC_HANDLER             ; 4C: Receiver buffer full (Replaced later)
00000138= 00000492                  81      DC.L    GENERIC_HANDLER             ; 4D: Timer A (Not used)
0000013C= 00000492 00000492         82      DCB.L   2,GENERIC_HANDLER           ; 4E-4F: MFP GPIO #6-7 (Not used)
00000144= 00000492 00000492 ...     83      DCB.L   176,GENERIC_HANDLER         ; 50-FF: Unused user vectors
00000404                            84  VECTORS_END:
00000404  =00000100                 85  VECTORS_COUNT   equ     256
00000404                            86  
00000404                            87  START:
00000404  4EB9 00000450             88      jsr     initDuart           * Setup the serial port
0000040A  41F9 00000496             89      lea     msgBanner, A0       * Show our banner
00000410  6100 000A                 90      bsr.w   printString
00000414                            91  LOOP:    
00000414  60FE                      92      bra.b   LOOP
00000416                            93      
00000416                            94  ******
00000416                            95  * Prints a newline (CR, LF)
00000416                            96  printNewline:
00000416  41F9 000004EC             97      lea     msgNewline, a0
0000041C                            98  ******
0000041C                            99  * Print a null terminated string
0000041C                           100  *
0000041C                           101  printString:
0000041C                           102   .loop:
0000041C  1018                     103      move.b  (a0)+, d0           * Read in character
0000041E  6704                     104      beq.s   .end                * Check for the null
00000420                           105      
00000420  6104                     106      bsr.s   outChar             * Otherwise write the character
00000422  60F8                     107      bra.s   .loop               * And continue
00000424                           108   .end:
00000424  4E75                     109      rts
00000426                           110      
00000426                           111  
00000426                           112  *****
00000426                           113  * Writes a character to Port A, blocking if not ready (Full buffer)
00000426                           114  *  - Takes a character in D0
00000426                           115  outChar:
00000426  0839 0002 00F00002       116      btst    #2, SRA             * Check if transmitter ready bit is set
0000042E  67F6                     117      beq     outChar             * Not ready, try again
00000430  13C0 00F00006            118      move.b  d0, TBA             * Transmit Character
00000436  4E75                     119      rts
00000438                           120  
00000438                           121  *****
00000438                           122  * Reads in a character from Port A, blocking if none available
00000438                           123  *  - Returns character in D0
00000438                           124  *    
00000438                           125  inChar:
00000438  1039 00F00002            126      move.b  SRA, d0             * Check if there's something to read
0000043E  0800 0000                127      btst.l  #0, d0              * RxRDY flag bit set?
00000442  67F4                     128      beq     inChar              * Nope, try again
00000444  1039 00F00006            129      move.b  RBA, d0             * Read Character into D0
0000044A  0200 007F                130      andi.b  #$7F, d0            * Clear MSb of character
0000044E  4E75                     131      rts
00000450                           132          
00000450                           133      
00000450                           134  *****
00000450                           135  * Initializes the 68681 DUART port A(1) as 19200 8N1 
00000450                           136  initDuart:
00000450  13FC 0030 00F00004       137      move.b  #$30, CRA           * Reset Port A transmitter   
00000458  13FC 0020 00F00004       138      move.b  #$20, CRA           * Reset Port A receiver
00000460  13FC 0010 00F00004       139      move.b  #$10, CRA           * Reset Port A MR (mode register) pointer
00000468                           140  
00000468  13FC 0080 00F00008       141      MOVE.B  #$80, ACR           * Select baud rate set 2
00000470  13FC 00CC 00F00002       142      move.b  #$CC, CSRA          * Set both Rx, Tx speeds to 19200 baud
00000478  13FC 0093 00F00000       143      move.b  #$93, MRA           * Set port A to 8 bit character, no parity
00000480                           144                                  * Enable RxRTS output using MRA
00000480  13FC 0037 00F00000       145      move.b  #$37, MRA           * Select normal operating mode
00000488                           146                                  * TxRTS, TxCTS, one stop bit using MR2A   
00000488  13FC 0005 00F00004       147      move.b  #$05, CRA           * Enable Port A transmitter and receiver
00000490                           148      
00000490  4E75                     149      rts    
00000492                           150  
00000492                           151  ;------------------------------------------------------------
00000492                           152  ; Exception handlers   
00000492                           153  GENERIC_HANDLER:
00000492  60FE                     154      bra GENERIC_HANDLER
00000494  4E73                     155      rte
00000496                           156  
00000496                           157  **********************************
00000496                           158  * Strings
00000496                           159  *
00000496                           160  msgBanner:
00000496= 0D 0A 53 74 65 76 ...    161      dc.b CR,LF,'Steve''s 68000 SBC',CR,LF
000004AB= 3D 3D 3D 3D 3D 3D ...    162      dc.b       '==================',CR,LF
000004BF= 54 79 70 65 20 61 ...    163      dc.b 'Type a character and it should echo back', CR, LF, CR, LF, 0
000004EC                           164      
000004EC                           165  msgNewline:
000004EC= 0D 0A 00                 166      dc.b CR,LF,0
000004EF                           167  
000004EF                           168      END    START            * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACR                 F00008
BEL                 7
BKSP                8
CR                  D
CRA                 F00004
CRB                 F00014
CSRA                F00002
CSRB                F00012
CTRLC               3
CTRLX               18
DUART               F00000
ESC                 1B
GENERIC_HANDLER     492
IMR                 F0000A
INCHAR              438
INITDUART           450
ISR                 F0000A
IVR                 F00018
LF                  A
LOOP                414
MRA                 F00000
MRB                 F00010
MSGBANNER           496
MSGNEWLINE          4EC
OUTCHAR             426
PRINTNEWLINE        416
PRINTSTRING         41C
PRINTSTRING:END     424
PRINTSTRING:LOOP    41C
RAMBASE             E00000
RAMLIMIT            E0FFFF
RBA                 F00006
RBB                 F00016
ROMBASE             0
SRA                 F00002
SRB                 F00012
START               404
TAB                 9
TBA                 F00006
TBB                 F00016
VECTORS             0
VECTORS_COUNT       100
VECTORS_END         404
