00000500 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2022-06-18 8:21:16 AM

00000000                             1  *********************************
00000000                             2  * 68681 Duart Register Addresses
00000000                             3  *
00000000  =00100000                  4  DUART       equ $100000         * DUART base address
00000000  =00100000                  5  DUART_MR1A  equ DUART+0         * Mode Register A           (R/W)
00000000  =00100000                  6  DUART_MR2A  equ DUART+0         * Mode Register A           (R/W)
00000000  =00100001                  7  DUART_SRA   equ DUART+1         * Status Register A         (r)
00000000  =00100001                  8  DUART_CSRA  equ DUART+1         * Clock Select Register A   (w)
00000000  =00100002                  9  DUART_CRA   equ DUART+2         * Commands Register A       (w)
00000000  =00100003                 10  DUART_RBA   equ DUART+3         * Receiver Buffer A         (r)
00000000  =00100003                 11  DUART_TBA   equ DUART+3         * Transmitter Buffer A      (w)
00000000  =00100004                 12  DUART_ACR   equ DUART+4         * Aux. Control Register     (R/W)
00000000  =00100005                 13  DUART_ISR   equ DUART+5         * Interrupt Status Register (R)
00000000  =00100005                 14  DUART_IMR   equ DUART+5         * Interrupt Mask Register   (W)
00000000  =00100008                 15  DUART_MR1B  equ DUART+8         * Mode Register B           (R/W)
00000000  =00100008                 16  DUART_MR2B  equ DUART+8         * Mode Register B           (R/W)
00000000  =00100009                 17  DUART_SRB   equ DUART+9         * Status Register B         (R)
00000000  =00100009                 18  DUART_CSRB  equ DUART+9         * Clock Select Register B   (W)
00000000  =0010000A                 19  DUART_CRB   equ DUART+10        * Commands Register B       (W)
00000000  =0010000B                 20  DUART_RBB   equ DUART+11        * Reciever Buffer B         (R)
00000000  =0010000B                 21  DUART_TBB   equ DUART+11        * Transmitter Buffer B      (W)
00000000  =0010000C                 22  DUART_IVR   equ DUART+12        * Interrupt Vector Register (R/W)
00000000  =0010000D                 23  DUART_OPCR  equ DUART+13        * Output port Configuration (W)
00000000  =0010000E                 24  DUART_OPBSC equ DUART+14        * Output port Bit Set Cmd   (W)
00000000  =0010000F                 25  DUART_OPBRC equ DUART+15         * Output port Bit Reset Cmd (W)
00000000                            26  
00000000                            27  **********************************
00000000                            28  * ASCII Control Characters
00000000                            29  *
00000000  =00000007                 30  BEL   equ $07
00000000  =00000008                 31  BKSP  equ $08       * CTRL-H
00000000  =00000009                 32  TAB   equ $09
00000000  =0000000A                 33  LF    equ $0A
00000000  =0000000D                 34  CR    equ $0D
00000000  =0000001B                 35  ESC   equ $1B
00000000                            36  
00000000  =00000003                 37  CTRLC   EQU $03     
00000000  =00000018                 38  CTRLX   EQU $18     * Line Clear
00000000                            39  
00000000                            40      ORG    $0000
00000000                            41      
00000000                            42  **** FIRST 8 bytes loaded after reset ****
00000000= 00100000                  43      DC.l    STACK_START         * Supervisor stack pointer
00000004= 00000500                  44      DC.l    START               * Initial PC  
00000008                            45  
00000500                            46      ORG $500    
00000500                            47  START:                  
00000500  4FF9 00100000             48      lea     STACK_START, SP     * Set our stack pointer to be sure
00000506  4EB9 0000055C             49      jsr     initDuart           * Setup the serial port
0000050C  41F9 000005C8             50      lea     msgBanner, A0       * Show our banner
00000512  6100 0014                 51      bsr.w   printString
00000516                            52  loop:
00000516  6100 002C                 53      bsr.w   inChar              * Read a character from the serial port into d0
0000051A  6100 0016                 54      bsr.w   outChar             * Write the character to the serial port
0000051E  4EF8 0516                 55      jmp loop
00000522                            56      
00000522                            57  ******
00000522                            58  * Prints a newline (CR, LF)
00000522                            59  printNewline:
00000522  41F9 0000061E             60      lea     msgNewline, a0
00000528                            61  ******
00000528                            62  * Print a null terminated string
00000528                            63  *
00000528                            64  printString:
00000528                            65   .loop:
00000528  1018                      66      move.b  (a0)+, d0    * Read in character
0000052A  6704                      67      beq.s   .end         * Check for the null
0000052C                            68      
0000052C  6104                      69      bsr.s   outChar      * Otherwise write the character
0000052E  60F8                      70      bra.s   .loop        * And continue
00000530                            71   .end:
00000530  4E75                      72      rts
00000532                            73      
00000532                            74  
00000532                            75  *****
00000532                            76  * Writes a character to Port A, blocking if not ready (Full buffer)
00000532                            77  *  - Takes a character in D0
00000532                            78  outChar:
00000532  0839 0002 00100001        79      btst    #2, DUART_SRA       * Check if transmitter ready bit is set
0000053A  67F6                      80      beq     outChar             * Not ready, try again
0000053C  13C0 00100003             81      move.b  d0, DUART_TBA       * Transmit Character
00000542  4E75                      82      rts
00000544                            83  
00000544                            84  *****
00000544                            85  * Reads in a character from Port A, blocking if none available
00000544                            86  *  - Returns character in D0
00000544                            87  *    
00000544                            88  inChar:
00000544  1039 00100001             89      move.b  DUART_SRA, d0       * Check if there's something to read
0000054A  0800 0000                 90      btst.l  #0, d0              * RxRDY flag bit set?
0000054E  67F4                      91      beq     inChar              * Nope, try again
00000550  1039 00100003             92      move.b  DUART_RBA, d0       * Read Character into D0
00000556  0200 007F                 93      andi.b  #$7F, d0            * Clear MSb of character
0000055A  4E75                      94      rts
0000055C                            95          
0000055C                            96      
0000055C                            97  *****
0000055C                            98  * Initializes the 68681 DUART port A(1) as 9600 8N1
0000055C                            99  
0000055C                           100   
0000055C                           101  initDuart:
0000055C                           102  
0000055C  13FC 0020 00100002       103      move.b #$20,DUART_CRA       ; reset receiver
00000564  13FC 0010 00100002       104      move.b #$10,DUART_CRA       ; reset MR pointer to MRx1
0000056C                           105  
0000056C  13FC 0000 00100004       106      move.b #$00,DUART_ACR       ; select BAUD rate set 1
00000574  13FC 00CC 00100001       107      move.b #$CC,DUART_CSRA      ; set TX & RX to 38400 BAUD
0000057C  13FC 0013 00100000       108      move.b #$13,DUART_MR1A      ; set 8bits,no parity,character mode,RxRDY IRQ,RxRTS disabled
00000584  13FC 0007 00100000       109      move.b #$07,DUART_MR2A      ; $07 Normal Mode,disable TxRTS & TxCTS,one Stop bit
0000058C  13FC 0005 00100002       110      move.b #$05,DUART_CRA       ; enable Receiver & Transmitter
00000594  13FC 00BB 00100009       111      move.b #$BB,DUART_CSRB      ; set TX & RX to 9600 BAUD
0000059C  13FC 0013 00100008       112      move.b #$13,DUART_MR1B      ; set 8bits,no parity,character mode,RxRDY IRQ,RxRTS disabled
000005A4  13FC 0007 00100008       113      move.b #$07,DUART_MR2B      ; $07 Normal Mode,disable TxRTS & TxCTS,one Stop bit
000005AC  13FC 0005 0010000A       114      move.b #$05,DUART_CRB       ; enable Receiver & Transmitter
000005B4                           115      
000005B4  1039 00100003            116      move.b  DUART_RBA, D0       ; Clear the FIFO buffer
000005BA  1039 00100003            117      move.b  DUART_RBA, D0
000005C0  1039 00100003            118      move.b  DUART_RBA, D0
000005C6  4E75                     119      rts    
000005C8                           120  
000005C8                           121  **********************************
000005C8                           122  * Strings
000005C8                           123  *
000005C8                           124  msgBanner:
000005C8= 0D 0A 53 74 65 76 ...    125      dc.b CR,LF,'Steve''s 68000 SBC',CR,LF
000005DD= 3D 3D 3D 3D 3D 3D ...    126      dc.b       '==================',CR,LF
000005F1= 54 79 70 65 20 61 ...    127      dc.b 'Type a character and it should echo back', CR, LF, CR, LF, 0
0000061E                           128      
0000061E                           129  msgNewline:
0000061E= 0D 0A 00                 130      dc.b CR,LF,0
00000621                           131  
00100000                           132      ORG $100000
00100000                           133  STACK_START:
00100000                           134  
00100000                           135      END    START            * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BEL                 7
BKSP                8
CR                  D
CTRLC               3
CTRLX               18
DUART               100000
DUART_ACR           100004
DUART_CRA           100002
DUART_CRB           10000A
DUART_CSRA          100001
DUART_CSRB          100009
DUART_IMR           100005
DUART_ISR           100005
DUART_IVR           10000C
DUART_MR1A          100000
DUART_MR1B          100008
DUART_MR2A          100000
DUART_MR2B          100008
DUART_OPBRC         10000F
DUART_OPBSC         10000E
DUART_OPCR          10000D
DUART_RBA           100003
DUART_RBB           10000B
DUART_SRA           100001
DUART_SRB           100009
DUART_TBA           100003
DUART_TBB           10000B
ESC                 1B
INCHAR              544
INITDUART           55C
LF                  A
LOOP                516
MSGBANNER           5C8
MSGNEWLINE          61E
OUTCHAR             532
PRINTNEWLINE        522
PRINTSTRING         528
PRINTSTRING:END     530
PRINTSTRING:LOOP    528
STACK_START         100000
START               500
TAB                 9
